package com.zerox.contest

/**
 * @author ZeromaXHe
 * @since 2022/8/7 10:15
 * @note
 * 第 305 场周赛
 * 血压高的一天从周赛坐牢开始，再也不熬夜之后打周赛了……
 * 算法题还是要保持思路清晰啊，第三题越写越掉到细节里面去了，头都晕了
 */
object WeeklyContest305 {
  /**
   * 6136. 算术三元组的数目 | 难度：简单
   * 104 / 104 个通过测试用例
   * 状态：通过
   * 执行用时: 7888 ms
   * 内存消耗: 56.5 MB
   *
   * @param nums
   * @param diff
   * @return
   */
  def arithmeticTriplets(nums: Array[Int], diff: Int): Int = {
    nums.indices.combinations(3).count(arr => nums(arr(1)) - nums(arr(0)) == diff && nums(arr(2)) - nums(arr(1)) == diff)
  }

  /**
   * 6139. 受限条件下可到达节点的数目 | 难度：中等
   * 62 / 62 个通过测试用例
   * 状态：通过
   * 执行用时: 2232 ms
   * 内存消耗: 140.2 MB
   *
   * @param n
   * @param edges
   * @param restricted
   * @return
   */
  def reachableNodes(n: Int, edges: Array[Array[Int]], restricted: Array[Int]): Int = {
    val visit = new Array[Boolean](n)
    restricted.foreach(visit(_) = true)
    val map = edges.flatMap(arr => Array(arr(0) -> arr(1), arr(1) -> arr(0))).groupBy(_._1).mapValues(_.map(_._2))
    val q = new scala.collection.mutable.Queue[Int]
    q enqueue 0
    visit(0) = true
    var result = 1
    while (q.nonEmpty) {
      var size = q.size
      while (size > 0) {
        val i = q.dequeue()
        if (map.contains(i)) {
          for (to <- map(i) if !visit(to)) {
            visit(to) = true
            q.enqueue(to)
            result += 1
          }
        }
        size -= 1
      }
    }
    result
  }

  /**
   * 6137. 检查数组是否存在有效划分 | 难度：中等
   * 狗日的，这道题周赛的时候坐牢啊！！！后来参考别人提交做的
   *
   * 执行用时：848 ms, 在所有 Scala 提交中击败了 100.00% 的用户
   * 内存消耗：70.8 MB, 在所有 Scala 提交中击败了 100.00% 的用户
   * 通过测试用例：112 / 112
   *
   * @param nums
   * @return
   */
  def validPartition(nums: Array[Int]): Boolean = {
    val n = nums.length
    val dp = new Array[Boolean](n + 1)
    dp(0) = true
    var i = 0
    while (i < n) {
      if (dp(i)) {
        if (i + 1 < n && (nums(i) == nums(i + 1))) dp(i + 2) = true
        if (i + 2 < n && (nums(i) == nums(i + 1)) && (nums(i) == nums(i + 2))) dp(i + 3) = true
        if (i + 2 < n && (nums(i) + 1 == nums(i + 1)) && (nums(i) + 2 == nums(i + 2))) dp(i + 3) = true
      }
      i += 1
    }
    dp(n)
  }

  def validPartition_wrongAnswer(nums: Array[Int]): Boolean = {
    val singleNegative = nums.zipWithIndex.map(t => {
      val i = t._2
      val first =
        if (i == 0 && nums(i + 1) != nums(i)) -nums(i)
        else if (i == nums.length - 1 && nums(i - 1) != nums(i)) -nums(i)
        else if (i > 0 && i < nums.length - 1 && nums(i - 1) != nums(i) && nums(i + 1) != nums(i)) -nums(i)
        else nums(i)
      (first, i)
    })
    val arr = singleNegative.map(t => {
      if (t._1 > 0 && ((t._2 > 0 && -t._1 - singleNegative(t._2 - 1)._1 == -1)
        || (t._2 < nums.length - 1 && -t._1 - singleNegative(t._2 + 1)._1 == 1))) t._1
      else if (t._1 < 0) t._1
      else 0
    })
    var i = 0
    var negative: Int = 0
    var nonZero: Int = 0
    var pre = 0
    var zero = 0
    while (i < nums.length) {
      if (arr(i) == 0) {
        if (nonZero > 0) {
          zero = 0
          if (!(negative to nonZero).exists(_ % 3 == 0)) return false
        }
        zero += 1
        negative = 0
        nonZero = 0
        pre = 0
      } else {
        if (pre != 0 && math.abs(pre) != math.abs(arr(i)) - 1) {
          if (!(negative to nonZero).exists(_ % 3 == 0)) return false
          if (pre > 0 || arr(i) > 0) return false

          negative = if (arr(i) < 0) 1 else 0
          nonZero = 1
          pre = 0
        } else {
          nonZero += 1
          if (arr(i) < 0) negative += 1
          pre = arr(i)
        }
      }
      i += 1
    }
    if (nonZero > 0 && !(negative to nonZero).exists(_ % 3 == 0)) return false
    true
  }

  /**
   * 6138. 最长理想子序列 | 难度：中等
   *
   * 周赛没来得及看，后来参考题解做的
   *
   * 执行用时：504 ms, 在所有 Scala 提交中击败了 100.00% 的用户
   * 内存消耗：53 MB, 在所有 Scala 提交中击败了 100.00% 的用户
   * 通过测试用例：84 / 84
   *
   * @param s
   * @param k
   * @return
   */
  def longestIdealString(s: String, k: Int): Int = {
    val f = new Array[Int](26)
    for (i <- s.indices) {
      val c = s.charAt(i) - 'a'
      for (j <- Math.max(c - k, 0) to Math.min(c + k, 25)) {
        f(c) = Math.max(f(c), f(j))
      }
      f(c) += 1
    }
    f.max
  }

  def main(args: Array[String]): Unit = {
    println(validPartition(Array(4, 4, 4, 5, 6))) // true
    println(validPartition(Array(1, 1, 1, 2))) // false
    println(validPartition(Array(348054, 7876, 34051))) // false
    println(validPartition(Array(910646, 910646, 910646, 910646, 910646, 910646, 910646, 910646, 910646, 910647, 910648, 910649, 910650, 910651, 910652, 910653, 910654, 910655, 910656, 910657, 910658, 910659, 910660, 910661, 910662, 910663, 910664, 910665, 910666, 910667, 910668, 910669, 910670, 910671, 910672, 910673, 910674, 910675, 910676, 910677, 910678, 910679, 910680, 910681, 910682, 910683, 910684, 910685, 910686, 910687, 910688, 910689, 910690, 910691, 910692, 910693, 662178, 662178, 662178, 351545, 351545, 351545, 351545, 351545, 651739, 651740, 651741, 651742, 651743, 651744, 651745, 651746, 651747, 651739, 651740, 651741, 651742, 651743, 651744, 651745, 651746, 651747, 651748, 651749, 651750, 651751, 651752, 651753))) // true
    println(validPartition(Array(5073, 5073, 5073, 5073, 5073, 5073, 5073, 5073, 5074, 5075, 5076, 5077, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5084, 5084, 5084, 5085, 5086, 5086, 5087, 5088, 5088, 5089, 5089, 5090, 5090, 5090, 5091, 5092, 5093, 5094, 5095, 5095, 5095, 5095, 5096, 5097, 5097, 5097, 5098, 5098, 5099, 5100, 5100, 5100, 5100, 5101, 5102, 5103, 5104, 5104, 5105, 5106, 5106, 5107, 5108, 5108, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5114, 5115, 5115, 5116, 5116, 5117, 5117, 5117, 5118, 5118, 5118, 5119, 5120, 5120, 5121, 5121, 5122, 5123, 5124, 5124, 5124, 5125, 5125, 5125, 5126, 5126, 5127, 5128, 5129, 5130, 5130, 5130, 5131, 5131, 5132, 5133, 5133, 5134, 5134, 5135, 5135, 5136, 5136, 5137, 5138, 5138, 5139, 5140, 5141, 5141, 5142, 5143, 5144, 5145, 5145, 5145, 5146, 5146, 5147, 5147, 5147, 5148, 5148, 5148, 5148, 5149, 5150, 5151, 5151, 5152, 5153, 5153, 5153, 5153, 5154, 5155, 5155, 5155, 5155, 5156, 5156, 5156, 5157, 5158, 5158, 5158, 5158, 5158, 5158, 5159, 5160, 5160, 5160, 5160, 5160, 5160, 5160, 5160, 5161, 5162, 5162, 5162, 5162, 5163, 5163, 5163, 5164, 5165, 5165, 5165, 5165, 5165, 5165, 5166, 5167, 5168, 5168, 5169, 5170, 5171, 5172, 5172, 5172, 5172, 5172, 5173, 5174, 5174, 5174, 5175, 5175, 5175, 5175, 5175, 5175, 5176, 5176, 5176, 5177, 5177, 5178, 5179, 5179, 5179, 5179, 5179, 5180, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5186, 5187, 5188, 5189, 5189, 5189, 5190, 5191, 5192, 5193, 5194, 5194, 5194, 5194, 5194, 5194, 5194, 5194, 5194, 5194, 5195, 5196, 5197, 5198, 5198, 5199, 5199, 5200, 5200, 5200, 5201, 5201, 5201, 5201, 5201, 5201, 5202, 5203, 5204, 5205, 5205, 5206, 5207, 5208, 5208, 5208, 5209, 5209, 5210, 5211, 5211, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5217, 5217, 5217, 5218, 5219, 5220, 5220, 5221, 5221, 5221, 5221, 5222, 5223, 5224, 5224, 5224, 5225, 5226, 5226, 5226, 5227, 5227, 5227, 5227, 5228, 5228, 5228, 5229, 5230, 5230, 5230, 5231, 5232, 5233, 5233, 5233, 5233, 5233, 5233, 5234, 5235, 5236, 5236, 5236, 5237, 5238, 5238, 5238, 5238, 5238, 5239, 5240, 5240, 5241, 5241, 5242, 5242, 5243, 5243, 5244, 5245, 5246, 5246, 5247, 5248, 5248, 5248, 5249, 5250, 5251, 5251, 5251, 5252, 5253, 5253, 5254, 5255, 5255, 5256, 5257, 5258, 5258, 5259, 5259, 5259, 5260, 5260, 5260, 5261, 5261, 5261, 5261, 5261, 5261, 5262, 5262, 5263, 5263, 5263, 5263, 5263, 5264, 5265, 5265, 5266, 5267, 5267, 5268, 5268, 5269, 5269, 5269, 5269, 5270, 5270, 5270, 5270, 5271, 5271, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5277, 5277, 5278, 5278, 5279, 5280, 5281, 5281, 5281, 5282, 5282, 5283, 5284, 5284, 5285, 5286, 5287, 5288, 5289, 5289, 5290, 5290, 5291, 5291, 5292, 5292, 5293, 5293, 5293, 5294, 5295, 5296, 5296, 5297, 5298, 5299, 5299, 5299, 5299, 5299, 5300, 5301, 5301, 5301, 5302, 5302, 5302, 5302, 5302, 5303, 5304, 5304, 5305, 5306, 5306, 5307, 5307, 5307, 5307, 5308, 5309, 5310, 5310, 5310, 5310, 5310, 5310, 5310, 5310, 5311, 5311, 5311, 5312, 5313, 5314, 5315, 5315, 5315, 5315, 5315, 5316, 5316, 5317, 5318, 5319, 5320, 5321, 5321, 5322, 5323, 5323, 5323, 5323, 5323, 5324, 5324, 5324, 5324, 5325, 5326, 5327, 5328, 5329, 5329, 5330, 5331, 5332, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5341, 5342, 5342, 5343, 5344, 5345, 5346, 5347, 5347, 5348, 5349, 5350, 5351, 5351, 5351, 5352, 5352, 5352, 5353, 5354, 5355, 5356, 5356, 5357, 5358, 5358, 5359, 5360, 5361, 5362, 5362, 5363, 5364, 5365, 5365, 5365, 5365, 5365, 5365, 5366, 5367, 5368, 5369, 5370, 5370, 5371, 5371, 5371, 5372, 5372, 5372))) // false
    println(validPartition(Array(1472, 1472, 1473, 1473, 1473, 1473, 1474, 1475, 1475, 1475, 1475, 1475, 1476, 1477, 1477, 1477, 1477, 1477, 1478, 1479, 1480, 1480, 1480, 1480, 1481, 1482, 1483, 1483, 1483, 1484, 1485, 1485, 1486, 1487, 1488, 1488, 1488, 1488, 1489, 1490, 1491, 1491, 1491, 1492, 1493, 1494, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1497, 1498, 1498, 1498, 1499, 1499, 1499, 1500, 1501, 1502, 1502, 1502, 1503, 1503, 1503, 1504, 1505, 1506, 1506, 1506, 1506, 1507, 1507, 1508, 1509, 1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1513, 1514, 1514, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1520, 1520, 1520, 1521, 1522, 1523, 1523, 1523, 1523, 1524, 1525, 1526, 1527, 1528, 1528, 1529, 1530, 1531, 1531, 1531, 1532, 1533, 1534, 1534, 1534, 1535, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1539, 1539, 1540, 1540, 1540, 1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1546, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1555, 1555, 1555, 1556, 1557, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1563, 1563, 1564, 1564, 1564, 1565, 1566, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1580, 1580, 1580, 1581, 1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1585, 1586, 1586, 1586, 1586, 1586, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1590, 1591, 1591, 1591, 1592, 1592, 1592, 1593, 1593, 1593, 1594, 1594, 1594, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596, 1596, 1596, 1597, 1597, 1598, 1598, 1598, 1599, 1599, 1599, 1600, 1601, 1602, 1602, 1602, 1602, 1602, 1603, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1606, 1607, 1608, 1608, 1608, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611, 1612, 1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1615, 1616, 1616, 1616, 1617, 1617, 1617, 1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623, 1624, 1625, 1626, 1627, 1627, 1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629, 1630, 1631, 1632, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1644, 1644, 1644, 1644, 1645, 1646, 1646, 1646, 1646, 1647, 1648, 1648, 1648, 1648, 1649, 1649, 1649, 1650, 1651, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653, 1654, 1655, 1656, 1657, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1660, 1660, 1660, 1660, 1660, 1661, 1662, 1663, 1663, 1663, 1664, 1664, 1665, 1665, 1665, 1666, 1667, 1668, 1668, 1668, 1668, 1669, 1669, 1670, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1674, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679, 1680, 1680, 1680, 1681, 1681, 1681, 1682, 1682, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1698, 1698, 1699, 1700, 1701, 1701, 1701, 1702, 1702, 1702))) // true
  }
}
