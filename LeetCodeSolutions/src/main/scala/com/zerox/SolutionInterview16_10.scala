package com.zerox

/**
 * @author zhuxi
 * @since 2022/6/30 15:00
 * @note
 * 面试题 16.10. 生存人数 | 难度：中等 | 标签：数组、计数
 * 给定 N 个人的出生年份和死亡年份，第 i 个人的出生年份为 birth[i]，死亡年份为 death[i]，实现一个方法以计算生存人数最多的年份。
 *
 * 你可以假设所有人都出生于 1900 年至 2000 年（含 1900 和 2000 ）之间。如果一个人在某一年的任意时期处于生存状态，那么他应该被纳入那一年的统计中。例如，生于 1908 年、死于 1909 年的人应当被列入 1908 年和 1909 年的计数。
 *
 * 如果有多个年份生存人数相同且均为最大值，输出其中最小的年份。
 *
 * 示例：
 * 输入：
 * birth = {1900, 1901, 1950}
 * death = {1948, 1951, 2000}
 * 输出： 1901
 *
 * 提示：
 * 0 < birth.length == death.length <= 10000
 * birth[i] <= death[i]
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/living-people-lcci
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
object SolutionInterview16_10 {
  def main(args: Array[String]): Unit = {
    // 1901
    println(maxAliveYear(Array(1900, 1901, 1950), Array(1948, 1951, 2000)))
    // 1960
    println(maxAliveYear(Array(1972, 1908, 1915, 1957, 1960, 1948, 1912, 1903, 1949, 1977, 1900, 1957, 1934, 1929, 1913, 1902, 1903, 1901),
      Array(1997, 1932, 1963, 1997, 1983, 2000, 1926, 1962, 1955, 1997, 1998, 1989, 1992, 1975, 1940, 1903, 1983, 1969)))
    // 1956
    println(maxAliveYear(Array(1927, 1954, 1903, 1928, 1956, 1929, 1929, 1928, 1958, 1902, 1953, 1912, 1923, 1937, 1915,
      1942, 1964, 1954, 1924, 1936, 1963, 1950, 1904, 1931, 1951, 1953, 1922, 1970, 1986, 1947, 1911, 1965, 1913, 1920,
      1947, 1962, 1903, 1905, 1978, 1974, 1950, 1921, 1929, 1901, 1925, 1929, 1951, 1944, 1945),
      Array(1987, 1992, 1967, 1997, 1963, 1970, 1944, 1986, 1997, 1937, 1971, 1982, 1980, 1992, 1995, 1992, 1991, 1964,
        1985, 1938, 1975, 1964, 1975, 1961, 1995, 1985, 1946, 1989, 1999, 1994, 1956, 1984, 1999, 1966, 1950, 1993,
        1960, 1939, 1990, 1975, 1982, 1921, 1964, 1998, 1969, 1970, 1965, 1973, 1958)))
  }

  /**
   * 执行用时：640 ms, 在所有 Scala 提交中击败了 100.00% 的用户
   * 内存消耗：54.5 MB, 在所有 Scala 提交中击败了 100.00% 的用户
   * 通过测试用例：70 / 70
   *
   * @param birth
   * @param death
   * @return
   */
  def maxAliveYear(birth: Array[Int], death: Array[Int]): Int = {
    val diff = new Array[Int](101)
    birth.foreach(i => diff(i - 1900) += 1)
    death.filter(_ < 2000).foreach(i => diff(i - 1899) -= 1)
    var max = 0
    var year = 1900
    var pop = 0
    for (i <- diff.indices) {
      pop += diff(i)
      if (pop > max) {
        max = pop
        year = 1900 + i
      }
    }
    year
  }
}
